{"mappings":"ACGA,MAAM,EAAW,aAAa,OAAO,CAAC,YAEjC,EAGH,QAAQ,GAAG,CAAC,GAFZ,OAAO,QAAQ,CAAC,IAAI,CAAG,mBAKrB,aAAa,OAAO,CAAC,cACvB,CAAA,SAAS,cAAc,CAAC,aAAa,WAAW,CAAG,CAAC,MAAM,EAAE,aAAa,OAAO,CAAC,aAAA,CAAc,AAAd","sources":["<anon>","js/script.js"],"sourcesContent":["// document.addEventListener('DOMContentLoaded', getAllWalks)\nlet pageNumber = 1;\nconst pageSize = 5;\nconst jwtToken = localStorage.getItem('jwtToken');\n// Nếu chưa có token, chuyển hướng về login.html\nif (!jwtToken) window.location.href = '/html/login.html';\nelse console.log(jwtToken);\nif (localStorage.getItem('loginName')) document.getElementById('loginName').textContent = `Hello ${localStorage.getItem('loginName')}`;\nfunction applyFilter() {\n    // Lấy giá trị từ form\n    const filterOn = document.getElementById('filterOn').value;\n    const filterQuery = document.getElementById('filterQuery').value;\n    const sortBy = document.getElementById('sortBy').value;\n    const isAscending = document.getElementById('isAscending').value;\n    // Gọi getAllWalks với các tham số filter\n    getAllWalks(filterOn, filterQuery, sortBy, isAscending);\n}\nfunction changePage(change) {\n    pageNumber += change;\n    if (pageNumber < 1) pageNumber = 1 // Đảm bảo không dưới trang 1\n    ;\n    applyFilter();\n}\nasync function getAllWalks(filterOn = null, filterQuery = null, sortBy = null, isAscending = null) {\n    document.getElementById('errorMessage').textContent = '';\n    let url = `https://${window.config.apiBaseUrl}/api/Walks/GetAll`;\n    const params = [];\n    params.push(`pageNumber=${encodeURIComponent(pageNumber)}`);\n    params.push(`pageSize=${encodeURIComponent(pageSize)}`);\n    if (filterOn && filterQuery) {\n        params.push(`filterOn=${encodeURIComponent(filterOn)}`);\n        params.push(`filterQuery=${encodeURIComponent(filterQuery)}`);\n    }\n    if (sortBy) {\n        params.push(`sortBy=${encodeURIComponent(sortBy)}`);\n        params.push(`isAscending=${encodeURIComponent(isAscending)}`);\n    }\n    if (params.length > 0) url += '?' + params.join('&');\n    console.log(url);\n    try {\n        const response = await fetch(url, {\n            headers: {\n                Authorization: `Bearer ${jwtToken}`\n            }\n        });\n        if (response.ok) {\n            const data = await response.json() // Chuyển đổi phản hồi sang JSON\n            ;\n            console.log('Fetched All Walks:', data) // Log kết quả\n            ;\n            displayResult(data) // Gọi hàm hiển thị kết quả\n            ;\n        } else {\n            document.getElementById('errorMessage').textContent = \"B\\u1EA1n kh\\xf4ng c\\xf3 quy\\u1EC1n d\\xf9ng ch\\u1EE9c n\\u0103ng n\\xe0y\";\n            alert('Response is not ok, please check fetchAllWalks');\n            console.error('Failed to fetch walks:', response.status);\n        }\n    } catch (error) {\n        alert('Failed to load data, please check your connection with the backend');\n        console.error('Error fetching walks:', error);\n    }\n}\n//hiển thị form AddWalk\nfunction toggleAddWalkForm() {\n    // Lấy phần tử addWalkForm\n    const addWalkForm = document.getElementById('addWalkForm');\n    // Hiển thị hoặc ẩn form khi nhấn nút Add\n    if (addWalkForm.style.display === 'none' || addWalkForm.style.display === '') addWalkForm.style.display = 'block' // Hiển thị form\n    ;\n    else addWalkForm.style.display = 'none' // Ẩn form\n    ;\n}\n//lấy data từ input rồi truyền vào gọi về API , add\nfunction callCreateWalk() {\n    const name = document.getElementById('walkName').value;\n    const description = document.getElementById('walkDescription').value;\n    const length = parseFloat(document.getElementById('walkLength').value);\n    const imageUrl = document.getElementById('walkImageUrl').value;\n    const difficultyId = document.getElementById('difficultyId').value;\n    const regionId = document.getElementById('regionId').value;\n    const newWalk = {\n        name: name,\n        description: description,\n        lengthInKm: length,\n        walkImageUrl: imageUrl,\n        difficultyId: difficultyId,\n        regionId: regionId\n    };\n    createWalk(newWalk);\n}\n//gọi API, add new walk\nasync function createWalk(walkData) {\n    try {\n        const response = await fetch(`https://${window.config.apiBaseUrl}/api/Walks`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${jwtToken}`\n            },\n            body: JSON.stringify(walkData)\n        });\n        if (response.ok) {\n            const createdWalk = await response.json();\n            console.log('Created Walk:', createdWalk);\n            toggleAddWalkForm();\n            getWalkById(createdWalk.id) // Hiển thị kết quả\n            ;\n        } else {\n            document.getElementById('errorMessage').textContent = \"B\\u1EA1n kh\\xf4ng c\\xf3 quy\\u1EC1n d\\xf9ng ch\\u1EE9c n\\u0103ng n\\xe0y\";\n            alert('response is not oke, check createWalk');\n            console.error('Failed to create walk:', response.status);\n        }\n    } catch (error) {\n        alert('Load data failed, pls connection with your BE');\n        console.error('Error:', error);\n    }\n}\n//lấy data từ input rồi truyền vào gọi về API, get single\nfunction callGetWalkById() {\n    const walkId = document.getElementById('walkId').value.trim();\n    if (walkId === null) {\n        alert('You forgot to input the WalkId!!!');\n        return;\n    }\n    getWalkById(walkId);\n}\n//gọi API, get single walk by id\nasync function getWalkById(walkId) {\n    try {\n        const response = await fetch(`https://${window.config.apiBaseUrl}/api/Walks/${walkId}`, {\n            method: 'GET',\n            headers: {\n                Authorization: `Bearer ${jwtToken}`\n            }\n        });\n        if (response.ok) {\n            const walk = await response.json();\n            console.log('Fetched Walk by ID:', walk);\n            displayResult([\n                walk\n            ]) // Hiển thị kết quả\n            ;\n        } else {\n            document.getElementById('errorMessage').textContent = \"B\\u1EA1n kh\\xf4ng c\\xf3 quy\\u1EC1n d\\xf9ng ch\\u1EE9c n\\u0103ng n\\xe0y\";\n            console.error('Walk not found:', response.status);\n        }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n//lấy data rồi bỏ vào form Update xong hiện form ra\nfunction showUpdateForm(walk) {\n    const form = document.getElementById('updateForm');\n    form.style.display = 'block' // Hiển thị form cập nhật\n    ;\n    // Điền dữ liệu hiện tại của walk vào form\n    document.getElementById('updateWalkName').value = walk.name;\n    document.getElementById('updateDescription').value = walk.description;\n    // document.getElementById('updateLength').value = walk.lengthInKm\n    document.getElementById('updateLength').value = String(walk.lengthInKm).replace(',', '.');\n    document.getElementById('updateImageUrl').value = walk.walkImageUrl;\n    document.getElementById('updateDifficultyId').value = walk.difficulty.id;\n    document.getElementById('updateRegionId').value = walk.region.id;\n    // Lưu id của walk vào form để gửi khi cập nhật\n    document.getElementById('updateForm').dataset.walkId = walk.id;\n}\n//lấy data đã được thay đổi rồi truyền vào gọi về API , update\nfunction submitUpdatedWalk() {\n    const walkId = document.getElementById('updateForm').dataset.walkId // Lấy id của walk\n    ;\n    if (!walkId) {\n        alert('Invalid Walk ID');\n        return;\n    }\n    const updatedData = {\n        name: document.getElementById('updateWalkName').value,\n        description: document.getElementById('updateDescription').value,\n        lengthInKm: parseFloat(document.getElementById('updateLength').value),\n        walkImageUrl: document.getElementById('updateImageUrl').value,\n        difficultyId: document.getElementById('updateDifficultyId').value,\n        regionId: document.getElementById('updateRegionId').value\n    };\n    updateWalk(walkId, updatedData);\n}\n//gọi API, update\nasync function updateWalk(id, updatedData) {\n    try {\n        const response = await fetch(`https://${window.config.apiBaseUrl}/api/Walks/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${jwtToken}`\n            },\n            body: JSON.stringify(updatedData)\n        });\n        if (!response.ok) {\n            alert('Update failed - response not ok');\n            document.getElementById('errorMessage').textContent = \"B\\u1EA1n kh\\xf4ng c\\xf3 quy\\u1EC1n d\\xf9ng ch\\u1EE9c n\\u0103ng n\\xe0y\";\n            throw new Error('Failed to update walk');\n        }\n        const updatedWalk = await response.json();\n        console.log('Updated Walk:', updatedWalk);\n        document.getElementById('updateForm').style.display = 'none';\n        // Làm mới danh sách walks sau khi cập nhật\n        getAllWalks();\n    } catch (error) {\n        console.error('Error updating walk:', error);\n    }\n}\n//cancel\nfunction cancelUpdate() {\n    document.getElementById('updateForm').style.display = 'none';\n}\n//lấy id rồi xin xác nhận, yes => gọi APi, delete\nasync function deleteWalk(walkId) {\n    const isConfirmed = window.confirm('Are you sure you want to delete this walk?');\n    if (!isConfirmed) {\n        console.log('Delete action was canceled');\n        return;\n    }\n    try {\n        const response = await fetch(`https://${window.config.apiBaseUrl}/api/Walks/${walkId}`, {\n            method: 'DELETE',\n            headers: {\n                Authorization: `Bearer ${jwtToken}`\n            }\n        });\n        if (response.ok) {\n            console.log('Deleted Walk with ID:', walkId);\n            alert('Walk deleted successfully');\n            getAllWalks() // Xóa kết quả trên giao diện hoặc thông báo xóa thành công\n            ;\n        } else {\n            document.getElementById('errorMessage').textContent = \"B\\u1EA1n kh\\xf4ng c\\xf3 quy\\u1EC1n d\\xf9ng ch\\u1EE9c n\\u0103ng n\\xe0y\";\n            alert('Failed to delete walk');\n            console.error('Failed to delete walk:', response.status);\n        }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n//hiển thị div chứa danh sách walk, số lượng thì tùy lúc gọi hàm này\nfunction displayResult(walks) {\n    const resultDiv = document.getElementById('result');\n    resultDiv.innerHTML = '' // Xóa nội dung cũ\n    ;\n    const table = document.createElement('table');\n    table.innerHTML = `\n    <tr>\n      <th>Walk Name</th>\n      <th>Description</th>\n      <th>Length (km)</th>\n      <th>Image URL</th>\n      <th>Region Code</th>\n      <th>Difficulty Name</th>\n      <th>Action</th>\n    </tr>\n  `;\n    walks.forEach((walk)=>{\n        // Tạo một phần tử div cho mỗi walk\n        const row = document.createElement('tr');\n        // Hiển thị các thông tin của walk\n        row.innerHTML = `\n      <td>${walk.name}</td>\n      <td>${walk.description}</td>\n      <td>${walk.lengthInKm}</td>\n      <td>${walk.walkImageUrl}</td>\n      <td>${walk.region.code}</td>\n      <td>${walk.difficulty.name}</td>\n    `;\n        // Tạo cột Action và thêm nút Update vào hàng\n        const actionCell = document.createElement('td');\n        const updateButton = document.createElement('button');\n        const deleteButton = document.createElement('button');\n        updateButton.textContent = 'Update';\n        deleteButton.textContent = 'Delete';\n        updateButton.onclick = ()=>showUpdateForm(walk);\n        deleteButton.onclick = ()=>deleteWalk(walk.id);\n        actionCell.appendChild(updateButton);\n        actionCell.appendChild(deleteButton);\n        row.appendChild(actionCell);\n        table.appendChild(row);\n    });\n    // Tạo thẻ div chứa các nút Previous và Next\n    const paginationDiv = document.createElement('div');\n    paginationDiv.style.marginTop = '10px' // Thêm khoảng cách giữa bảng và các nút\n    ;\n    // Tạo nút Previous\n    const previousBtn = document.createElement('button');\n    previousBtn.id = 'previousBtn';\n    previousBtn.textContent = 'Previous';\n    previousBtn.onclick = ()=>changePage(-1);\n    // Tạo nút Next\n    const nextBtn = document.createElement('button');\n    nextBtn.id = 'nextBtn';\n    nextBtn.textContent = 'Next';\n    nextBtn.onclick = ()=>changePage(1);\n    paginationDiv.appendChild(previousBtn);\n    paginationDiv.appendChild(nextBtn);\n    // Thêm bảng vào `resultDiv`\n    resultDiv.appendChild(table);\n    resultDiv.appendChild(paginationDiv);\n}\n\n//# sourceMappingURL=index.2402477d.js.map\n","// document.addEventListener('DOMContentLoaded', getAllWalks)\r\nlet pageNumber = 1\r\nconst pageSize = 5\r\nconst jwtToken = localStorage.getItem('jwtToken')\r\n// Nếu chưa có token, chuyển hướng về login.html\r\nif (!jwtToken) {\r\n  window.location.href = '/html/login.html'\r\n} else {\r\n  console.log(jwtToken)\r\n}\r\n\r\nif (localStorage.getItem('loginName')) {\r\n  document.getElementById('loginName').textContent = `Hello ${localStorage.getItem('loginName')}`\r\n}\r\n\r\nfunction applyFilter() {\r\n  // Lấy giá trị từ form\r\n  const filterOn = document.getElementById('filterOn').value\r\n  const filterQuery = document.getElementById('filterQuery').value\r\n  const sortBy = document.getElementById('sortBy').value\r\n  const isAscending = document.getElementById('isAscending').value\r\n  // Gọi getAllWalks với các tham số filter\r\n  getAllWalks(filterOn, filterQuery, sortBy, isAscending)\r\n}\r\nfunction changePage(change) {\r\n  pageNumber += change\r\n  if (pageNumber < 1) pageNumber = 1 // Đảm bảo không dưới trang 1\r\n  applyFilter()\r\n}\r\nasync function getAllWalks(filterOn = null, filterQuery = null, sortBy = null, isAscending = null) {\r\n  document.getElementById('errorMessage').textContent = ''\r\n  let url = `https://${window.config.apiBaseUrl}/api/Walks/GetAll`\r\n  const params = []\r\n\r\n  params.push(`pageNumber=${encodeURIComponent(pageNumber)}`)\r\n  params.push(`pageSize=${encodeURIComponent(pageSize)}`)\r\n\r\n  if (filterOn && filterQuery) {\r\n    params.push(`filterOn=${encodeURIComponent(filterOn)}`)\r\n    params.push(`filterQuery=${encodeURIComponent(filterQuery)}`)\r\n  }\r\n\r\n  if (sortBy) {\r\n    params.push(`sortBy=${encodeURIComponent(sortBy)}`)\r\n    params.push(`isAscending=${encodeURIComponent(isAscending)}`)\r\n  }\r\n\r\n  if (params.length > 0) {\r\n    url += '?' + params.join('&')\r\n  }\r\n\r\n  console.log(url)\r\n\r\n  try {\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        Authorization: `Bearer ${jwtToken}`, // Đặt token vào header\r\n      },\r\n    })\r\n\r\n    if (response.ok) {\r\n      const data = await response.json() // Chuyển đổi phản hồi sang JSON\r\n      console.log('Fetched All Walks:', data) // Log kết quả\r\n      displayResult(data) // Gọi hàm hiển thị kết quả\r\n    } else {\r\n      document.getElementById('errorMessage').textContent = 'Bạn không có quyền dùng chức năng này'\r\n      alert('Response is not ok, please check fetchAllWalks')\r\n      console.error('Failed to fetch walks:', response.status)\r\n    }\r\n  } catch (error) {\r\n    alert('Failed to load data, please check your connection with the backend')\r\n    console.error('Error fetching walks:', error)\r\n  }\r\n}\r\n\r\n//hiển thị form AddWalk\r\nfunction toggleAddWalkForm() {\r\n  // Lấy phần tử addWalkForm\r\n  const addWalkForm = document.getElementById('addWalkForm')\r\n  // Hiển thị hoặc ẩn form khi nhấn nút Add\r\n  if (addWalkForm.style.display === 'none' || addWalkForm.style.display === '') {\r\n    addWalkForm.style.display = 'block' // Hiển thị form\r\n  } else {\r\n    addWalkForm.style.display = 'none' // Ẩn form\r\n  }\r\n}\r\n//lấy data từ input rồi truyền vào gọi về API , add\r\nfunction callCreateWalk() {\r\n  const name = document.getElementById('walkName').value\r\n  const description = document.getElementById('walkDescription').value\r\n  const length = parseFloat(document.getElementById('walkLength').value)\r\n  const imageUrl = document.getElementById('walkImageUrl').value\r\n  const difficultyId = document.getElementById('difficultyId').value\r\n  const regionId = document.getElementById('regionId').value\r\n\r\n  const newWalk = {\r\n    name: name,\r\n    description: description,\r\n    lengthInKm: length,\r\n    walkImageUrl: imageUrl,\r\n    difficultyId: difficultyId,\r\n    regionId: regionId,\r\n  }\r\n  createWalk(newWalk)\r\n}\r\n//gọi API, add new walk\r\nasync function createWalk(walkData) {\r\n  try {\r\n    const response = await fetch(`https://${window.config.apiBaseUrl}/api/Walks`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${jwtToken}` },\r\n      body: JSON.stringify(walkData), // Dữ liệu Walk mới từ đối tượng `walkData`\r\n    })\r\n    if (response.ok) {\r\n      const createdWalk = await response.json()\r\n      console.log('Created Walk:', createdWalk)\r\n      toggleAddWalkForm()\r\n      getWalkById(createdWalk.id) // Hiển thị kết quả\r\n    } else {\r\n      document.getElementById('errorMessage').textContent = 'Bạn không có quyền dùng chức năng này'\r\n      alert('response is not oke, check createWalk')\r\n      console.error('Failed to create walk:', response.status)\r\n    }\r\n  } catch (error) {\r\n    alert('Load data failed, pls connection with your BE')\r\n    console.error('Error:', error)\r\n  }\r\n}\r\n\r\n//lấy data từ input rồi truyền vào gọi về API, get single\r\nfunction callGetWalkById() {\r\n  const walkId = document.getElementById('walkId').value.trim()\r\n  if (walkId === null) {\r\n    alert('You forgot to input the WalkId!!!')\r\n    return\r\n  }\r\n  getWalkById(walkId)\r\n}\r\n//gọi API, get single walk by id\r\nasync function getWalkById(walkId) {\r\n  try {\r\n    const response = await fetch(`https://${window.config.apiBaseUrl}/api/Walks/${walkId}`, {\r\n      method: 'GET',\r\n      headers: { Authorization: `Bearer ${jwtToken}` },\r\n    })\r\n\r\n    if (response.ok) {\r\n      const walk = await response.json()\r\n      console.log('Fetched Walk by ID:', walk)\r\n      displayResult([walk]) // Hiển thị kết quả\r\n    } else {\r\n      document.getElementById('errorMessage').textContent = 'Bạn không có quyền dùng chức năng này'\r\n      console.error('Walk not found:', response.status)\r\n    }\r\n  } catch (error) {\r\n    console.error('Error:', error)\r\n  }\r\n}\r\n\r\n//lấy data rồi bỏ vào form Update xong hiện form ra\r\nfunction showUpdateForm(walk) {\r\n  const form = document.getElementById('updateForm')\r\n  form.style.display = 'block' // Hiển thị form cập nhật\r\n\r\n  // Điền dữ liệu hiện tại của walk vào form\r\n  document.getElementById('updateWalkName').value = walk.name\r\n  document.getElementById('updateDescription').value = walk.description\r\n  // document.getElementById('updateLength').value = walk.lengthInKm\r\n  document.getElementById('updateLength').value = String(walk.lengthInKm).replace(',', '.')\r\n  document.getElementById('updateImageUrl').value = walk.walkImageUrl\r\n  document.getElementById('updateDifficultyId').value = walk.difficulty.id\r\n  document.getElementById('updateRegionId').value = walk.region.id\r\n\r\n  // Lưu id của walk vào form để gửi khi cập nhật\r\n  document.getElementById('updateForm').dataset.walkId = walk.id\r\n}\r\n//lấy data đã được thay đổi rồi truyền vào gọi về API , update\r\nfunction submitUpdatedWalk() {\r\n  const walkId = document.getElementById('updateForm').dataset.walkId // Lấy id của walk\r\n  if (!walkId) {\r\n    alert('Invalid Walk ID')\r\n    return\r\n  }\r\n  const updatedData = {\r\n    name: document.getElementById('updateWalkName').value,\r\n    description: document.getElementById('updateDescription').value,\r\n    lengthInKm: parseFloat(document.getElementById('updateLength').value),\r\n    walkImageUrl: document.getElementById('updateImageUrl').value,\r\n    difficultyId: document.getElementById('updateDifficultyId').value,\r\n    regionId: document.getElementById('updateRegionId').value,\r\n  }\r\n  updateWalk(walkId, updatedData)\r\n}\r\n//gọi API, update\r\nasync function updateWalk(id, updatedData) {\r\n  try {\r\n    const response = await fetch(`https://${window.config.apiBaseUrl}/api/Walks/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${jwtToken}`,\r\n      },\r\n      body: JSON.stringify(updatedData),\r\n    })\r\n    if (!response.ok) {\r\n      alert('Update failed - response not ok')\r\n      document.getElementById('errorMessage').textContent = 'Bạn không có quyền dùng chức năng này'\r\n      throw new Error('Failed to update walk')\r\n    }\r\n    const updatedWalk = await response.json()\r\n    console.log('Updated Walk:', updatedWalk)\r\n    document.getElementById('updateForm').style.display = 'none'\r\n    // Làm mới danh sách walks sau khi cập nhật\r\n    getAllWalks()\r\n  } catch (error) {\r\n    console.error('Error updating walk:', error)\r\n  }\r\n}\r\n//cancel\r\nfunction cancelUpdate() {\r\n  document.getElementById('updateForm').style.display = 'none'\r\n}\r\n\r\n//lấy id rồi xin xác nhận, yes => gọi APi, delete\r\nasync function deleteWalk(walkId) {\r\n  const isConfirmed = window.confirm('Are you sure you want to delete this walk?')\r\n  if (!isConfirmed) {\r\n    console.log('Delete action was canceled')\r\n    return\r\n  }\r\n  try {\r\n    const response = await fetch(`https://${window.config.apiBaseUrl}/api/Walks/${walkId}`, {\r\n      method: 'DELETE',\r\n      headers: { Authorization: `Bearer ${jwtToken}` },\r\n    })\r\n\r\n    if (response.ok) {\r\n      console.log('Deleted Walk with ID:', walkId)\r\n      alert('Walk deleted successfully')\r\n      getAllWalks() // Xóa kết quả trên giao diện hoặc thông báo xóa thành công\r\n    } else {\r\n      document.getElementById('errorMessage').textContent = 'Bạn không có quyền dùng chức năng này'\r\n      alert('Failed to delete walk')\r\n      console.error('Failed to delete walk:', response.status)\r\n    }\r\n  } catch (error) {\r\n    console.error('Error:', error)\r\n  }\r\n}\r\n\r\n//hiển thị div chứa danh sách walk, số lượng thì tùy lúc gọi hàm này\r\nfunction displayResult(walks) {\r\n  const resultDiv = document.getElementById('result')\r\n  resultDiv.innerHTML = '' // Xóa nội dung cũ\r\n\r\n  const table = document.createElement('table')\r\n  table.innerHTML = `\r\n    <tr>\r\n      <th>Walk Name</th>\r\n      <th>Description</th>\r\n      <th>Length (km)</th>\r\n      <th>Image URL</th>\r\n      <th>Region Code</th>\r\n      <th>Difficulty Name</th>\r\n      <th>Action</th>\r\n    </tr>\r\n  `\r\n  walks.forEach((walk) => {\r\n    // Tạo một phần tử div cho mỗi walk\r\n    const row = document.createElement('tr')\r\n\r\n    // Hiển thị các thông tin của walk\r\n    row.innerHTML = `\r\n      <td>${walk.name}</td>\r\n      <td>${walk.description}</td>\r\n      <td>${walk.lengthInKm}</td>\r\n      <td>${walk.walkImageUrl}</td>\r\n      <td>${walk.region.code}</td>\r\n      <td>${walk.difficulty.name}</td>\r\n    `\r\n    // Tạo cột Action và thêm nút Update vào hàng\r\n    const actionCell = document.createElement('td')\r\n    const updateButton = document.createElement('button')\r\n    const deleteButton = document.createElement('button')\r\n    updateButton.textContent = 'Update'\r\n    deleteButton.textContent = 'Delete'\r\n\r\n    updateButton.onclick = () => showUpdateForm(walk)\r\n    deleteButton.onclick = () => deleteWalk(walk.id)\r\n\r\n    actionCell.appendChild(updateButton)\r\n    actionCell.appendChild(deleteButton)\r\n    row.appendChild(actionCell)\r\n    table.appendChild(row)\r\n  })\r\n  // Tạo thẻ div chứa các nút Previous và Next\r\n  const paginationDiv = document.createElement('div')\r\n  paginationDiv.style.marginTop = '10px' // Thêm khoảng cách giữa bảng và các nút\r\n\r\n  // Tạo nút Previous\r\n  const previousBtn = document.createElement('button')\r\n  previousBtn.id = 'previousBtn'\r\n  previousBtn.textContent = 'Previous'\r\n  previousBtn.onclick = () => changePage(-1)\r\n\r\n  // Tạo nút Next\r\n  const nextBtn = document.createElement('button')\r\n  nextBtn.id = 'nextBtn'\r\n  nextBtn.textContent = 'Next'\r\n  nextBtn.onclick = () => changePage(1)\r\n\r\n  paginationDiv.appendChild(previousBtn)\r\n  paginationDiv.appendChild(nextBtn)\r\n  // Thêm bảng vào `resultDiv`\r\n  resultDiv.appendChild(table)\r\n  resultDiv.appendChild(paginationDiv)\r\n}\r\n"],"names":["jwtToken","localStorage","getItem","console","log","window","location","href","document","getElementById","textContent"],"version":3,"file":"index.2402477d.js.map"}