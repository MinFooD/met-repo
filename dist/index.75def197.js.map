{"mappings":"AAAA,SAAS,gBAAgB,CAAC,oBAAoB;IAC5C,+CAA+C;IAC/C,MAAM,gBAAgB,aAAa,OAAO,CAAC;IAC3C,IAAI,eAAe;QACjB,MAAM;QACN,aAAa,UAAU,CAAC;IAC1B;IAEA,6CAA6C;IAC7C,MAAM,WAAW,SAAS,cAAc,CAAC;IACzC,MAAM,QAAQ,SAAS,cAAc,CAAC;IAEtC,SAAS;QACP,MAAM,WAAW,GAAG,SAAS,OAAO,GAAG,WAAW;IACpD;IACA,IAAI,YAAY,MAAM;QACpB,0CAA0C;QAC1C,SAAS,gBAAgB,CAAC,UAAU;QAEpC,uCAAuC;QACvC;IACF;AACF;AAEA,SAAS;IACP,MAAM,WAAW,SAAS,cAAc,CAAC,YAAY,KAAK;IAC1D,MAAM,WAAW,SAAS,cAAc,CAAC,YAAY,KAAK;IAE1D,MAAM,OAAO;QACX,UAAU;QACV,UAAU;IACZ;IACA,QAAQ,GAAG,CAAC,OAAO,MAAM,CAAC,UAAU;IAEpC,MAAM;AACR;AAEA,eAAe,MAAM,IAAI;IACvB,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,CAAC,QAAQ,EAAE,OAAO,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;YACjF,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,IAAI,KAAK,QAAQ,EACf,aAAa,OAAO,CAAC,aAAa,KAAK,QAAQ;QAEjD,IAAI,KAAK,QAAQ,EAAE;YACjB,aAAa,OAAO,CAAC,YAAY,KAAK,QAAQ;YAC9C,OAAO,QAAQ,CAAC,IAAI,GAAG;QACzB,OAAO;YACL,QAAQ,GAAG,CAAC;YACZ,SAAS,cAAc,CAAC,gBAAgB,WAAW,GAAG;QACxD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,UAAU;QACxB,SAAS,cAAc,CAAC,gBAAgB,WAAW,GAAG;IACxD;AACF;AAEA,SAAS;IACP,4CAA4C;IAC5C,aAAa,UAAU,CAAC;IACxB,OAAO,QAAQ,CAAC,IAAI,GAAG;IACvB,aAAa,OAAO,CAAC,iBAAiB;AACxC;AAEA,SAAS;IACP,MAAM,WAAW,SAAS,cAAc,CAAC,YAAY,KAAK;IAC1D,MAAM,WAAW,SAAS,cAAc,CAAC,YAAY,KAAK;IAC1D,MAAM,WAAW,SAAS,cAAc,CAAC;IACzC,MAAM,QAAQ,SAAS,OAAO,GAAG;QAAC;KAAS,GAAG;QAAC;KAAS;IAExD,QAAQ,GAAG,CAAC,aAAa;IACzB,QAAQ,GAAG,CAAC,aAAa;IACzB,QAAQ,GAAG,CAAC,UAAU;IAEtB,IAAI,UAAU;QACZ,UAAU;QACV,UAAU;QACV,OAAO;IACT;IACA,SAAS;AACX;AAEA,eAAe,SAAS,OAAO;IAC7B,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,CAAC,QAAQ,EAAE,OAAO,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAAE;YACpF,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,IAAI,SAAS,EAAE,EAAE;YACf,MAAM,UAAU,MAAM,SAAS,IAAI;YACnC,QAAQ,GAAG,CAAC,4BAA4B;YACxC,MAAM;YACN,OAAO,QAAQ,CAAC,IAAI,GAAG;QACzB,OAAO;YACL,MAAM,eAAe,MAAM,SAAS,IAAI;YACxC,MAAM;YACN,QAAQ,KAAK,CAAC,uBAAuB,SAAS,MAAM,EAAE;QACxD;IACF,EAAE,OAAO,OAAO;QACd,MAAM;QACN,QAAQ,KAAK,CAAC,UAAU;IAC1B;AACF","sources":["js/auth.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n  // Hiển thị thông báo nếu có trong localStorage\r\n  const logoutMessage = localStorage.getItem('logoutMessage')\r\n  if (logoutMessage) {\r\n    alert(logoutMessage)\r\n    localStorage.removeItem('logoutMessage')\r\n  }\r\n\r\n  // Cập nhật nhãn checkbox dựa trên trạng thái\r\n  const checkbox = document.getElementById('CheckboxLarge')\r\n  const label = document.getElementById('checkboxLabel')\r\n\r\n  function updateLabel() {\r\n    label.textContent = checkbox.checked ? 'Writer' : 'Reader'\r\n  }\r\n  if (checkbox != null) {\r\n    // Lắng nghe sự kiện thay đổi của checkbox\r\n    checkbox.addEventListener('change', updateLabel)\r\n\r\n    // Thiết lập nhãn ban đầu khi trang tải\r\n    updateLabel()\r\n  }\r\n})\r\n\r\nfunction callLogin() {\r\n  const username = document.getElementById('username').value\r\n  const password = document.getElementById('password').value\r\n\r\n  const user = {\r\n    username: username,\r\n    password: password,\r\n  }\r\n  console.log(window.config.apiBaseUrl)\r\n\r\n  login(user)\r\n}\r\n\r\nasync function login(user) {\r\n  try {\r\n    const response = await fetch(`https://${window.config.apiBaseUrl}/api/Auth/Login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(user),\r\n    })\r\n\r\n    const data = await response.json()\r\n    if (data.userName) {\r\n      localStorage.setItem('loginName', data.userName)\r\n    }\r\n    if (data.jwtToken) {\r\n      localStorage.setItem('jwtToken', data.jwtToken)\r\n      window.location.href = '/'\r\n    } else {\r\n      console.log('No Token! Please check.')\r\n      document.getElementById('errorMessage').textContent = 'Token Failed'\r\n    }\r\n  } catch (error) {\r\n    console.error('Error:', error)\r\n    document.getElementById('errorMessage').textContent = 'Login failed!'\r\n  }\r\n}\r\n\r\nfunction logout() {\r\n  // Xóa JWT khỏi localStorage và chuyển hướng\r\n  localStorage.removeItem('jwtToken')\r\n  window.location.href = '/login'\r\n  localStorage.setItem('logoutMessage', 'Logout succeeded!')\r\n}\r\n\r\nfunction callRegister() {\r\n  const username = document.getElementById('username').value\r\n  const password = document.getElementById('password').value\r\n  const checkbox = document.getElementById('CheckboxLarge')\r\n  const roles = checkbox.checked ? ['writer'] : ['reader']\r\n\r\n  console.log('Username:', username)\r\n  console.log('Password:', password)\r\n  console.log('Roles:', roles)\r\n\r\n  var account = {\r\n    userName: username,\r\n    password: password,\r\n    roles: roles,\r\n  }\r\n  Register(account)\r\n}\r\n\r\nasync function Register(account) {\r\n  try {\r\n    const response = await fetch(`https://${window.config.apiBaseUrl}/api/Auth/Register`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(account),\r\n    })\r\n\r\n    if (response.ok) {\r\n      const message = await response.text()\r\n      console.log('Registration Successful:', message)\r\n      alert(message)\r\n      window.location.href = '/login'\r\n    } else {\r\n      const errorMessage = await response.text()\r\n      alert('Registration failed. Please check your permissions.')\r\n      console.error('Failed to register:', response.status, errorMessage)\r\n    }\r\n  } catch (error) {\r\n    alert('Load data failed, please check your connection to the backend.')\r\n    console.error('Error:', error)\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"index.75def197.js.map","sourceRoot":"/__parcel_source_root/"}